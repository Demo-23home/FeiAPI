Stage1: Auth&Profile
    #file_management:
        !jwt (done)
        !installed-apps 
        !jazzmin (done)
        !jwt-settings (done)
        !cors-headers
        !swagger  (done)
        !code refactoring 
        !static_&_media_settings  (done)
        !admin_site_customization


    #Custome_User_Model(AbstractUser) (done)
        - User
        - Docotr


    #User(custome_User_Model) (done)
        - username (login)
        - email (email)


    #Profile: >> signals  (done)
        - first_name (charfiled)
        - last_name (charfiled)
        - birth_date (datetimefiled) --
        - government [choices]
        - city [choices]
        - phone_number [positive-integer-filed]
        - gender [choices]
        
        !Profile_Data_Function   (done)


    #Authentication: >> jwt (done)
        1-user
            register*
            login*(encode the user data in the token!)
            user_profile* 
            reset_password*

                        2-doctor
                            register
                            login
                            user_profile
                            reset_password


Stage2: Pharmacy(done)
    #Creating Pharmacy Model 
        - attrs
        - fav
    # CRUDS
        - top 3 pharm
        - fliter(type)
    #Creating Cart Model
        - add, remove , out of stock 

Stage3: Labs(done)
    #creating Labs Model
        - attrs
    # CRUDS
        - top 5 objects
        - fliter(type)
    #set appointment

Stage4: HomePage  (done)
    - list all docs (done)
    - top 5 docs (done)
    - top 3 pharms
    - labs
    - user_profile

Stage5: Bookings (done)
    Doctor-Booking: (done)
        - book function 
        - date, time
        - package 
        - list user bookings
        - user => doctor relationship
        - cancel[reason, reschedual]
        - patients in doctor app(get the number of patients through the number of doctor bookings) 
    
    Lab-Booking: (done)
        - book function
        - date, time 
        - user => lab relationship
        - package[]
        - cancel[reason, reschedual]
        - patients in labs app(get the number of patients through the number of lab bookings)

Stage6: Medical Profile (++++)
    patient:
        - comment(done)
        - lab result
        - prescriptions
        - tests (done)
    
        

Stage6: Plans (done)
    Doctor: (done)
        #CRUDS
        - patient
            - medicines(CRUDS)
        
        #Medcines (done)
            - name
            - dose 
            - bill-dosage
            - program
            - take medicine
            - quantity 

    - create a patient_plan once booking with a doctor  (++++)

Stage7: Patients App
    - list doctor-related patients (done)
    - review doctor (done)
    - review lab (done)
    - list doctor reviews, add rate to review function (done)


Stage9: Payment
    - pharmacy payment(done)
    - labs payment(done)
    - doctor-payment (done)
    - return cart detail based on user token(done)
    - cvv  (++++)
    - add amount to the card  (++++)



Stage10: Chats
    Websocket: 
        - connect

        - disconnect

        - send_group

        - broadcast_group

        - message_list
        
        - message_send


Stage11: AI integration

Stage12: Admin Customizing 
    - Add project logo to admin

Stage13: Code Refactoring
    - define sechma for swagger
    - write comments
    - remove dupliactes

Stage14: Dockerzing redis: (cashing)

Stage15: DB-filling 

Stage(extra work):
	- check on all list functions -> pagination 

	- check on the booking response data (price)
	
	- return the card_image based on the card type(3)
	
	- list favroite products
	
	- doctor detail return full image (done)

	- return products image in cart
	
	- fix doctor patinets